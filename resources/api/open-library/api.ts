/* tslint:disable */
/* eslint-disable */
/**
 * Open Library API
 * - These are still in development and may not be perfect - Contribute by proposing edits to [openapi.json](https://github.com/internetarchive/openlibrary/blob/master/static/openapi.json) - Please do not use our APIs for bulk downloads, see [dev center](https://openlibrary.org/developers/api)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    'loc': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * AuthorsApi - axios parameter creator
 * @export
 */
export const AuthorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read Authors
         * @param {any} olid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAuthorsAuthorsOlidJsonGet: async (olid: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'olid' is not null or undefined
            assertParamExists('readAuthorsAuthorsOlidJsonGet', 'olid', olid)
            const localVarPath = `/authors/{olid}.json`
                .replace(`{${"olid"}}`, encodeURIComponent(String(olid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Authors Works
         * @param {any} olid 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAuthorsWorksAuthorsOlidWorksJsonGet: async (olid: any, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'olid' is not null or undefined
            assertParamExists('readAuthorsWorksAuthorsOlidWorksJsonGet', 'olid', olid)
            const localVarPath = `/authors/{olid}/works.json`
                .replace(`{${"olid"}}`, encodeURIComponent(String(olid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorsApi - functional programming interface
 * @export
 */
export const AuthorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read Authors
         * @param {any} olid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAuthorsAuthorsOlidJsonGet(olid: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAuthorsAuthorsOlidJsonGet(olid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read Authors Works
         * @param {any} olid 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAuthorsWorksAuthorsOlidWorksJsonGet(olid: any, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAuthorsWorksAuthorsOlidWorksJsonGet(olid, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorsApi - factory interface
 * @export
 */
export const AuthorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorsApiFp(configuration)
    return {
        /**
         * 
         * @summary Read Authors
         * @param {any} olid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAuthorsAuthorsOlidJsonGet(olid: any, options?: any): AxiosPromise<any> {
            return localVarFp.readAuthorsAuthorsOlidJsonGet(olid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Authors Works
         * @param {any} olid 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAuthorsWorksAuthorsOlidWorksJsonGet(olid: any, limit?: number, options?: any): AxiosPromise<any> {
            return localVarFp.readAuthorsWorksAuthorsOlidWorksJsonGet(olid, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorsApi - object-oriented interface
 * @export
 * @class AuthorsApi
 * @extends {BaseAPI}
 */
export class AuthorsApi extends BaseAPI {
    /**
     * 
     * @summary Read Authors
     * @param {any} olid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public readAuthorsAuthorsOlidJsonGet(olid: any, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).readAuthorsAuthorsOlidJsonGet(olid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Authors Works
     * @param {any} olid 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public readAuthorsWorksAuthorsOlidWorksJsonGet(olid: any, limit?: number, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).readAuthorsWorksAuthorsOlidWorksJsonGet(olid, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BooksApi - axios parameter creator
 * @export
 */
export const BooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read Api Books
         * @param {string} bibkeys 
         * @param {string} [format] Specifies the response format. Possible values are json and javascript. When not specified the format is javascript.
         * @param {any} [callback] The name of the JavaScript function to call with the result. This is considered only when the format is javascript.
         * @param {string} [jscmd] Decides what information to provide for each matched bib_key. Possible values are viewapi and data. The default value is viewapi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readApiBooksApiBooksGet: async (bibkeys: string, format?: string, callback?: any, jscmd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bibkeys' is not null or undefined
            assertParamExists('readApiBooksApiBooksGet', 'bibkeys', bibkeys)
            const localVarPath = `/api/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bibkeys !== undefined) {
                localVarQueryParameter['bibkeys'] = bibkeys;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (jscmd !== undefined) {
                localVarQueryParameter['jscmd'] = jscmd;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Api Volumes Brief
         * @param {any} keyType 
         * @param {any} value 
         * @param {any} [callback] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readApiVolumesBriefApiVolumesBriefKeyTypeValueJsonGet: async (keyType: any, value: any, callback?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyType' is not null or undefined
            assertParamExists('readApiVolumesBriefApiVolumesBriefKeyTypeValueJsonGet', 'keyType', keyType)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('readApiVolumesBriefApiVolumesBriefKeyTypeValueJsonGet', 'value', value)
            const localVarPath = `/api/volumes/brief/{key_type}/{value}.json`
                .replace(`{${"key_type"}}`, encodeURIComponent(String(keyType)))
                .replace(`{${"value"}}`, encodeURIComponent(String(value)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Books
         * @param {any} olid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readBooksBooksOlidGet: async (olid: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'olid' is not null or undefined
            assertParamExists('readBooksBooksOlidGet', 'olid', olid)
            const localVarPath = `/books/{olid}`
                .replace(`{${"olid"}}`, encodeURIComponent(String(olid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Isbn
         * @param {any} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readIsbnIsbnIsbnGet: async (isbn: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isbn' is not null or undefined
            assertParamExists('readIsbnIsbnIsbnGet', 'isbn', isbn)
            const localVarPath = `/isbn/{isbn}`
                .replace(`{${"isbn"}}`, encodeURIComponent(String(isbn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Works
         * @param {any} olid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWorksWorksOlidGet: async (olid: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'olid' is not null or undefined
            assertParamExists('readWorksWorksOlidGet', 'olid', olid)
            const localVarPath = `/works/{olid}`
                .replace(`{${"olid"}}`, encodeURIComponent(String(olid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BooksApi - functional programming interface
 * @export
 */
export const BooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read Api Books
         * @param {string} bibkeys 
         * @param {string} [format] Specifies the response format. Possible values are json and javascript. When not specified the format is javascript.
         * @param {any} [callback] The name of the JavaScript function to call with the result. This is considered only when the format is javascript.
         * @param {string} [jscmd] Decides what information to provide for each matched bib_key. Possible values are viewapi and data. The default value is viewapi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readApiBooksApiBooksGet(bibkeys: string, format?: string, callback?: any, jscmd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readApiBooksApiBooksGet(bibkeys, format, callback, jscmd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read Api Volumes Brief
         * @param {any} keyType 
         * @param {any} value 
         * @param {any} [callback] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readApiVolumesBriefApiVolumesBriefKeyTypeValueJsonGet(keyType: any, value: any, callback?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readApiVolumesBriefApiVolumesBriefKeyTypeValueJsonGet(keyType, value, callback, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read Books
         * @param {any} olid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readBooksBooksOlidGet(olid: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readBooksBooksOlidGet(olid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read Isbn
         * @param {any} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readIsbnIsbnIsbnGet(isbn: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readIsbnIsbnIsbnGet(isbn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read Works
         * @param {any} olid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readWorksWorksOlidGet(olid: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readWorksWorksOlidGet(olid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BooksApi - factory interface
 * @export
 */
export const BooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BooksApiFp(configuration)
    return {
        /**
         * 
         * @summary Read Api Books
         * @param {string} bibkeys 
         * @param {string} [format] Specifies the response format. Possible values are json and javascript. When not specified the format is javascript.
         * @param {any} [callback] The name of the JavaScript function to call with the result. This is considered only when the format is javascript.
         * @param {string} [jscmd] Decides what information to provide for each matched bib_key. Possible values are viewapi and data. The default value is viewapi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readApiBooksApiBooksGet(bibkeys: string, format?: string, callback?: any, jscmd?: string, options?: any): AxiosPromise<any> {
            return localVarFp.readApiBooksApiBooksGet(bibkeys, format, callback, jscmd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Api Volumes Brief
         * @param {any} keyType 
         * @param {any} value 
         * @param {any} [callback] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readApiVolumesBriefApiVolumesBriefKeyTypeValueJsonGet(keyType: any, value: any, callback?: any, options?: any): AxiosPromise<any> {
            return localVarFp.readApiVolumesBriefApiVolumesBriefKeyTypeValueJsonGet(keyType, value, callback, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Books
         * @param {any} olid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readBooksBooksOlidGet(olid: any, options?: any): AxiosPromise<any> {
            return localVarFp.readBooksBooksOlidGet(olid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Isbn
         * @param {any} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readIsbnIsbnIsbnGet(isbn: any, options?: any): AxiosPromise<any> {
            return localVarFp.readIsbnIsbnIsbnGet(isbn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Works
         * @param {any} olid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWorksWorksOlidGet(olid: any, options?: any): AxiosPromise<any> {
            return localVarFp.readWorksWorksOlidGet(olid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BooksApi - object-oriented interface
 * @export
 * @class BooksApi
 * @extends {BaseAPI}
 */
export class BooksApi extends BaseAPI {
    /**
     * 
     * @summary Read Api Books
     * @param {string} bibkeys 
     * @param {string} [format] Specifies the response format. Possible values are json and javascript. When not specified the format is javascript.
     * @param {any} [callback] The name of the JavaScript function to call with the result. This is considered only when the format is javascript.
     * @param {string} [jscmd] Decides what information to provide for each matched bib_key. Possible values are viewapi and data. The default value is viewapi.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public readApiBooksApiBooksGet(bibkeys: string, format?: string, callback?: any, jscmd?: string, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).readApiBooksApiBooksGet(bibkeys, format, callback, jscmd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Api Volumes Brief
     * @param {any} keyType 
     * @param {any} value 
     * @param {any} [callback] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public readApiVolumesBriefApiVolumesBriefKeyTypeValueJsonGet(keyType: any, value: any, callback?: any, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).readApiVolumesBriefApiVolumesBriefKeyTypeValueJsonGet(keyType, value, callback, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Books
     * @param {any} olid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public readBooksBooksOlidGet(olid: any, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).readBooksBooksOlidGet(olid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Isbn
     * @param {any} isbn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public readIsbnIsbnIsbnGet(isbn: any, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).readIsbnIsbnIsbnGet(isbn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Works
     * @param {any} olid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public readWorksWorksOlidGet(olid: any, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).readWorksWorksOlidGet(olid, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoversApi - axios parameter creator
 * @export
 */
export const CoversApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read Covers Key Type Value Size Jpeg
         * @param {any} keyType 
         * @param {any} value 
         * @param {any} size 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCoversKeyTypeValueSizeJpegCoversKeyTypeValueSizeJpgGet: async (keyType: any, value: any, size: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyType' is not null or undefined
            assertParamExists('readCoversKeyTypeValueSizeJpegCoversKeyTypeValueSizeJpgGet', 'keyType', keyType)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('readCoversKeyTypeValueSizeJpegCoversKeyTypeValueSizeJpgGet', 'value', value)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('readCoversKeyTypeValueSizeJpegCoversKeyTypeValueSizeJpgGet', 'size', size)
            const localVarPath = `/covers/{key_type}/{value}-{size}.jpg`
                .replace(`{${"key_type"}}`, encodeURIComponent(String(keyType)))
                .replace(`{${"value"}}`, encodeURIComponent(String(value)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoversApi - functional programming interface
 * @export
 */
export const CoversApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoversApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read Covers Key Type Value Size Jpeg
         * @param {any} keyType 
         * @param {any} value 
         * @param {any} size 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readCoversKeyTypeValueSizeJpegCoversKeyTypeValueSizeJpgGet(keyType: any, value: any, size: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readCoversKeyTypeValueSizeJpegCoversKeyTypeValueSizeJpgGet(keyType, value, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoversApi - factory interface
 * @export
 */
export const CoversApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoversApiFp(configuration)
    return {
        /**
         * 
         * @summary Read Covers Key Type Value Size Jpeg
         * @param {any} keyType 
         * @param {any} value 
         * @param {any} size 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCoversKeyTypeValueSizeJpegCoversKeyTypeValueSizeJpgGet(keyType: any, value: any, size: any, options?: any): AxiosPromise<any> {
            return localVarFp.readCoversKeyTypeValueSizeJpegCoversKeyTypeValueSizeJpgGet(keyType, value, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoversApi - object-oriented interface
 * @export
 * @class CoversApi
 * @extends {BaseAPI}
 */
export class CoversApi extends BaseAPI {
    /**
     * 
     * @summary Read Covers Key Type Value Size Jpeg
     * @param {any} keyType 
     * @param {any} value 
     * @param {any} size 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoversApi
     */
    public readCoversKeyTypeValueSizeJpegCoversKeyTypeValueSizeJpgGet(keyType: any, value: any, size: any, options?: AxiosRequestConfig) {
        return CoversApiFp(this.configuration).readCoversKeyTypeValueSizeJpegCoversKeyTypeValueSizeJpgGet(keyType, value, size, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read Search Authors Json
         * @param {any} q 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSearchAuthorsJsonSearchAuthorsJsonGet: async (q: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('readSearchAuthorsJsonSearchAuthorsJsonGet', 'q', q)
            const localVarPath = `/search/authors.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Search Json
         * @param {any} q 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSearchJsonSearchJsonGet: async (q: any, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('readSearchJsonSearchJsonGet', 'q', q)
            const localVarPath = `/search.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read Search Authors Json
         * @param {any} q 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSearchAuthorsJsonSearchAuthorsJsonGet(q: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readSearchAuthorsJsonSearchAuthorsJsonGet(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read Search Json
         * @param {any} q 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSearchJsonSearchJsonGet(q: any, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readSearchJsonSearchJsonGet(q, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * 
         * @summary Read Search Authors Json
         * @param {any} q 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSearchAuthorsJsonSearchAuthorsJsonGet(q: any, options?: any): AxiosPromise<any> {
            return localVarFp.readSearchAuthorsJsonSearchAuthorsJsonGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Search Json
         * @param {any} q 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSearchJsonSearchJsonGet(q: any, page?: number, options?: any): AxiosPromise<any> {
            return localVarFp.readSearchJsonSearchJsonGet(q, page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @summary Read Search Authors Json
     * @param {any} q 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public readSearchAuthorsJsonSearchAuthorsJsonGet(q: any, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).readSearchAuthorsJsonSearchAuthorsJsonGet(q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Search Json
     * @param {any} q 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public readSearchJsonSearchJsonGet(q: any, page?: number, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).readSearchJsonSearchJsonGet(q, page, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubjectsApi - axios parameter creator
 * @export
 */
export const SubjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read Subjects
         * @param {any} subject 
         * @param {boolean} [details] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSubjectsSubjectsSubjectJsonGet: async (subject: any, details?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject' is not null or undefined
            assertParamExists('readSubjectsSubjectsSubjectJsonGet', 'subject', subject)
            const localVarPath = `/subjects/{subject}.json`
                .replace(`{${"subject"}}`, encodeURIComponent(String(subject)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubjectsApi - functional programming interface
 * @export
 */
export const SubjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read Subjects
         * @param {any} subject 
         * @param {boolean} [details] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSubjectsSubjectsSubjectJsonGet(subject: any, details?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readSubjectsSubjectsSubjectJsonGet(subject, details, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubjectsApi - factory interface
 * @export
 */
export const SubjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubjectsApiFp(configuration)
    return {
        /**
         * 
         * @summary Read Subjects
         * @param {any} subject 
         * @param {boolean} [details] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSubjectsSubjectsSubjectJsonGet(subject: any, details?: boolean, options?: any): AxiosPromise<any> {
            return localVarFp.readSubjectsSubjectsSubjectJsonGet(subject, details, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubjectsApi - object-oriented interface
 * @export
 * @class SubjectsApi
 * @extends {BaseAPI}
 */
export class SubjectsApi extends BaseAPI {
    /**
     * 
     * @summary Read Subjects
     * @param {any} subject 
     * @param {boolean} [details] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApi
     */
    public readSubjectsSubjectsSubjectJsonGet(subject: any, details?: boolean, options?: AxiosRequestConfig) {
        return SubjectsApiFp(this.configuration).readSubjectsSubjectsSubjectJsonGet(subject, details, options).then((request) => request(this.axios, this.basePath));
    }
}



